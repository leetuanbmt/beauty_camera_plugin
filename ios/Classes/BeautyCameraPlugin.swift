// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

func deepEqualsBeautyCameraPlugin(_ lhs: Any?, _ rhs: Any?) -> Bool {
  let cleanLhs = nilOrValue(lhs) as Any?
  let cleanRhs = nilOrValue(rhs) as Any?
  switch (cleanLhs, cleanRhs) {
  case (nil, nil):
    return true

  case (nil, _), (_, nil):
    return false

  case is (Void, Void):
    return true

  case let (cleanLhsHashable, cleanRhsHashable) as (AnyHashable, AnyHashable):
    return cleanLhsHashable == cleanRhsHashable

  case let (cleanLhsArray, cleanRhsArray) as ([Any?], [Any?]):
    guard cleanLhsArray.count == cleanRhsArray.count else { return false }
    for (index, element) in cleanLhsArray.enumerated() {
      if !deepEqualsBeautyCameraPlugin(element, cleanRhsArray[index]) {
        return false
      }
    }
    return true

  case let (cleanLhsDictionary, cleanRhsDictionary) as ([AnyHashable: Any?], [AnyHashable: Any?]):
    guard cleanLhsDictionary.count == cleanRhsDictionary.count else { return false }
    for (key, cleanLhsValue) in cleanLhsDictionary {
      guard cleanRhsDictionary.index(forKey: key) != nil else { return false }
      if !deepEqualsBeautyCameraPlugin(cleanLhsValue, cleanRhsDictionary[key]!) {
        return false
      }
    }
    return true

  default:
    // Any other type shouldn't be able to be used with pigeon. File an issue if you find this to be untrue.
    return false
  }
}

func deepHashBeautyCameraPlugin(value: Any?, hasher: inout Hasher) {
  if let valueList = value as? [AnyHashable] {
     for item in valueList { deepHashBeautyCameraPlugin(value: item, hasher: &hasher) }
     return
  }

  if let valueDict = value as? [AnyHashable: AnyHashable] {
    for key in valueDict.keys { 
      hasher.combine(key)
      deepHashBeautyCameraPlugin(value: valueDict[key]!, hasher: &hasher)
    }
    return
  }

  if let hashableValue = value as? AnyHashable {
    hasher.combine(hashableValue.hashValue)
  }

  return hasher.combine(String(describing: value))
}

    

enum CameraFilterMode: Int {
  case none = 0
  case beauty = 1
  case mono = 2
  case negative = 3
  case sepia = 4
  case solarize = 5
  case posterize = 6
  case whiteboard = 7
  case blackboard = 8
  case aqua = 9
  case emboss = 10
  case sketch = 11
  case neon = 12
  case vintage = 13
  case brightness = 14
  case contrast = 15
  case saturation = 16
  case sharpen = 17
  case gaussianBlur = 18
  case vignette = 19
  case hue = 20
  case exposure = 21
  case highlightShadow = 22
  case levels = 23
  case colorBalance = 24
  case lookup = 25
}

enum VideoQuality: Int {
  case low = 0
  case medium = 1
  case high = 2
  case veryHigh = 3
  case ultra = 4
}

enum FlashMode: Int {
  case off = 0
  case on = 1
  case auto = 2
  case torch = 3
}

/// Generated class from Pigeon that represents data sent in messages.
struct AdvancedCameraSettings: Hashable {
  var videoQuality: VideoQuality? = nil
  var maxFrameRate: Int64? = nil
  var videoStabilization: Bool? = nil
  var autoExposure: Bool? = nil
  var enableFaceDetection: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> AdvancedCameraSettings? {
    let videoQuality: VideoQuality? = nilOrValue(pigeonVar_list[0])
    let maxFrameRate: Int64? = nilOrValue(pigeonVar_list[1])
    let videoStabilization: Bool? = nilOrValue(pigeonVar_list[2])
    let autoExposure: Bool? = nilOrValue(pigeonVar_list[3])
    let enableFaceDetection: Bool? = nilOrValue(pigeonVar_list[4])

    return AdvancedCameraSettings(
      videoQuality: videoQuality,
      maxFrameRate: maxFrameRate,
      videoStabilization: videoStabilization,
      autoExposure: autoExposure,
      enableFaceDetection: enableFaceDetection
    )
  }
  func toList() -> [Any?] {
    return [
      videoQuality,
      maxFrameRate,
      videoStabilization,
      autoExposure,
      enableFaceDetection,
    ]
  }
  static func == (lhs: AdvancedCameraSettings, rhs: AdvancedCameraSettings) -> Bool {
    return deepEqualsBeautyCameraPlugin(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashBeautyCameraPlugin(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct FaceData: Hashable {
  var x: Double
  var y: Double
  var size: Double
  var id: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> FaceData? {
    let x = pigeonVar_list[0] as! Double
    let y = pigeonVar_list[1] as! Double
    let size = pigeonVar_list[2] as! Double
    let id = pigeonVar_list[3] as! Int64

    return FaceData(
      x: x,
      y: y,
      size: size,
      id: id
    )
  }
  func toList() -> [Any?] {
    return [
      x,
      y,
      size,
      id,
    ]
  }
  static func == (lhs: FaceData, rhs: FaceData) -> Bool {
    return deepEqualsBeautyCameraPlugin(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashBeautyCameraPlugin(value: toList(), hasher: &hasher)
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PreviewSize: Hashable {
  var width: Int64
  var height: Int64


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PreviewSize? {
    let width = pigeonVar_list[0] as! Int64
    let height = pigeonVar_list[1] as! Int64

    return PreviewSize(
      width: width,
      height: height
    )
  }
  func toList() -> [Any?] {
    return [
      width,
      height,
    ]
  }
  static func == (lhs: PreviewSize, rhs: PreviewSize) -> Bool {
    return deepEqualsBeautyCameraPlugin(lhs.toList(), rhs.toList())  }
  func hash(into hasher: inout Hasher) {
    deepHashBeautyCameraPlugin(value: toList(), hasher: &hasher)
  }
}

private class BeautyCameraPluginPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return CameraFilterMode(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return VideoQuality(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return FlashMode(rawValue: enumResultAsInt)
      }
      return nil
    case 132:
      return AdvancedCameraSettings.fromList(self.readValue() as! [Any?])
    case 133:
      return FaceData.fromList(self.readValue() as! [Any?])
    case 134:
      return PreviewSize.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class BeautyCameraPluginPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? CameraFilterMode {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? VideoQuality {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? FlashMode {
      super.writeByte(131)
      super.writeValue(value.rawValue)
    } else if let value = value as? AdvancedCameraSettings {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? FaceData {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? PreviewSize {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class BeautyCameraPluginPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return BeautyCameraPluginPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return BeautyCameraPluginPigeonCodecWriter(data: data)
  }
}

class BeautyCameraPluginPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = BeautyCameraPluginPigeonCodec(readerWriter: BeautyCameraPluginPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol BeautyCameraHostApi {
  func initialize(settings: AdvancedCameraSettings, completion: @escaping (Result<Void, Error>) -> Void)
  func dispose(completion: @escaping (Result<Void, Error>) -> Void)
  func switchCamera(completion: @escaping (Result<Void, Error>) -> Void)
  func setZoom(zoomLevel: Double, completion: @escaping (Result<Void, Error>) -> Void)
  func focusOnPoint(x: Int64, y: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func setFlashMode(mode: FlashMode, completion: @escaping (Result<Void, Error>) -> Void)
  func setDisplayOrientation(degrees: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func getPreviewTexture(completion: @escaping (Result<Int64, Error>) -> Void)
  func getPreviewSize(completion: @escaping (Result<PreviewSize, Error>) -> Void)
  func takePhoto(completion: @escaping (Result<String, Error>) -> Void)
  func startVideoRecording(completion: @escaping (Result<Void, Error>) -> Void)
  func stopVideoRecording(completion: @escaping (Result<String, Error>) -> Void)
  func getCameraSensorAspectRatio(completion: @escaping (Result<Double, Error>) -> Void)
  func setFilterMode(mode: CameraFilterMode, level: Double, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class BeautyCameraHostApiSetup {
  static var codec: FlutterStandardMessageCodec { BeautyCameraPluginPigeonCodec.shared }
  /// Sets up an instance of `BeautyCameraHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: BeautyCameraHostApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.initialize\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let settingsArg = args[0] as! AdvancedCameraSettings
        api.initialize(settings: settingsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let disposeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.dispose\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disposeChannel.setMessageHandler { _, reply in
        api.dispose { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      disposeChannel.setMessageHandler(nil)
    }
    let switchCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.switchCamera\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      switchCameraChannel.setMessageHandler { _, reply in
        api.switchCamera { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      switchCameraChannel.setMessageHandler(nil)
    }
    let setZoomChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.setZoom\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setZoomChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let zoomLevelArg = args[0] as! Double
        api.setZoom(zoomLevel: zoomLevelArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setZoomChannel.setMessageHandler(nil)
    }
    let focusOnPointChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.focusOnPoint\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      focusOnPointChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let xArg = args[0] as! Int64
        let yArg = args[1] as! Int64
        api.focusOnPoint(x: xArg, y: yArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      focusOnPointChannel.setMessageHandler(nil)
    }
    let setFlashModeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.setFlashMode\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setFlashModeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let modeArg = args[0] as! FlashMode
        api.setFlashMode(mode: modeArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setFlashModeChannel.setMessageHandler(nil)
    }
    let setDisplayOrientationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.setDisplayOrientation\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setDisplayOrientationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let degreesArg = args[0] as! Int64
        api.setDisplayOrientation(degrees: degreesArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setDisplayOrientationChannel.setMessageHandler(nil)
    }
    let getPreviewTextureChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.getPreviewTexture\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getPreviewTextureChannel.setMessageHandler { _, reply in
        api.getPreviewTexture { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getPreviewTextureChannel.setMessageHandler(nil)
    }
    let getPreviewSizeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.getPreviewSize\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getPreviewSizeChannel.setMessageHandler { _, reply in
        api.getPreviewSize { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getPreviewSizeChannel.setMessageHandler(nil)
    }
    let takePhotoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.takePhoto\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      takePhotoChannel.setMessageHandler { _, reply in
        api.takePhoto { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      takePhotoChannel.setMessageHandler(nil)
    }
    let startVideoRecordingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.startVideoRecording\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startVideoRecordingChannel.setMessageHandler { _, reply in
        api.startVideoRecording { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startVideoRecordingChannel.setMessageHandler(nil)
    }
    let stopVideoRecordingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.stopVideoRecording\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopVideoRecordingChannel.setMessageHandler { _, reply in
        api.stopVideoRecording { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopVideoRecordingChannel.setMessageHandler(nil)
    }
    let getCameraSensorAspectRatioChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.getCameraSensorAspectRatio\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCameraSensorAspectRatioChannel.setMessageHandler { _, reply in
        api.getCameraSensorAspectRatio { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getCameraSensorAspectRatioChannel.setMessageHandler(nil)
    }
    let setFilterModeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.setFilterMode\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setFilterModeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let modeArg = args[0] as! CameraFilterMode
        let levelArg = args[1] as! Double
        api.setFilterMode(mode: modeArg, level: levelArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setFilterModeChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol BeautyCameraFlutterApiProtocol {
  func onZoomChanged(zoomLevel zoomLevelArg: Double, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onFlashModeChanged(mode modeArg: FlashMode, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onCameraSwitched(cameraId cameraIdArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onFaceDetected(faces facesArg: [FaceData], completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onVideoRecordingStarted(completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onVideoRecordingStopped(path pathArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onFilterModeChanged(mode modeArg: CameraFilterMode, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class BeautyCameraFlutterApi: BeautyCameraFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: BeautyCameraPluginPigeonCodec {
    return BeautyCameraPluginPigeonCodec.shared
  }
  func onZoomChanged(zoomLevel zoomLevelArg: Double, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraFlutterApi.onZoomChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([zoomLevelArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onFlashModeChanged(mode modeArg: FlashMode, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraFlutterApi.onFlashModeChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([modeArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onCameraSwitched(cameraId cameraIdArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraFlutterApi.onCameraSwitched\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([cameraIdArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onFaceDetected(faces facesArg: [FaceData], completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraFlutterApi.onFaceDetected\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([facesArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onVideoRecordingStarted(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraFlutterApi.onVideoRecordingStarted\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onVideoRecordingStopped(path pathArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraFlutterApi.onVideoRecordingStopped\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([pathArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onFilterModeChanged(mode modeArg: CameraFilterMode, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraFlutterApi.onFilterModeChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([modeArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
