// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v25.3.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.beauty.camera_plugin

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object BeautyCameraPluginPigeonPigeonUtils {

  fun createConnectionError(channelName: String): FlutterError {
    return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")  }

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
  fun deepEquals(a: Any?, b: Any?): Boolean {
    if (a is ByteArray && b is ByteArray) {
        return a.contentEquals(b)
    }
    if (a is IntArray && b is IntArray) {
        return a.contentEquals(b)
    }
    if (a is LongArray && b is LongArray) {
        return a.contentEquals(b)
    }
    if (a is DoubleArray && b is DoubleArray) {
        return a.contentEquals(b)
    }
    if (a is Array<*> && b is Array<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is List<*> && b is List<*>) {
      return a.size == b.size &&
          a.indices.all{ deepEquals(a[it], b[it]) }
    }
    if (a is Map<*, *> && b is Map<*, *>) {
      return a.size == b.size && a.all {
          (b as Map<Any?, Any?>).containsKey(it.key) &&
          deepEquals(it.value, b[it.key])
      }
    }
    return a == b
  }
      
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class CameraFilterMode(val raw: Int) {
  NONE(0),
  BEAUTY(1),
  MONO(2),
  NEGATIVE(3),
  SEPIA(4),
  SOLARIZE(5),
  POSTERIZE(6),
  WHITEBOARD(7),
  BLACKBOARD(8),
  AQUA(9),
  EMBOSS(10),
  SKETCH(11),
  NEON(12),
  VINTAGE(13),
  BRIGHTNESS(14),
  CONTRAST(15),
  SATURATION(16),
  SHARPEN(17),
  GAUSSIAN_BLUR(18),
  VIGNETTE(19),
  HUE(20),
  EXPOSURE(21),
  HIGHLIGHT_SHADOW(22),
  LEVELS(23),
  COLOR_BALANCE(24),
  LOOKUP(25);

  companion object {
    fun ofRaw(raw: Int): CameraFilterMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class VideoQuality(val raw: Int) {
  LOW(0),
  MEDIUM(1),
  HIGH(2),
  VERY_HIGH(3),
  ULTRA(4);

  companion object {
    fun ofRaw(raw: Int): VideoQuality? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class FlashMode(val raw: Int) {
  OFF(0),
  ON(1),
  AUTO(2),
  TORCH(3);

  companion object {
    fun ofRaw(raw: Int): FlashMode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CameraFacing(val raw: Int) {
  FRONT(0),
  BACK(1);

  companion object {
    fun ofRaw(raw: Int): CameraFacing? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class ScaleType(val raw: Int) {
  CENTER_CROP(0),
  CENTER_INSIDE(1);

  companion object {
    fun ofRaw(raw: Int): ScaleType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class AdvancedCameraSettings (
  val videoQuality: VideoQuality? = null,
  val maxFrameRate: Long? = null,
  val videoStabilization: Boolean? = null,
  val autoExposure: Boolean? = null,
  val enableFaceDetection: Boolean? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): AdvancedCameraSettings {
      val videoQuality = pigeonVar_list[0] as VideoQuality?
      val maxFrameRate = pigeonVar_list[1] as Long?
      val videoStabilization = pigeonVar_list[2] as Boolean?
      val autoExposure = pigeonVar_list[3] as Boolean?
      val enableFaceDetection = pigeonVar_list[4] as Boolean?
      return AdvancedCameraSettings(videoQuality, maxFrameRate, videoStabilization, autoExposure, enableFaceDetection)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      videoQuality,
      maxFrameRate,
      videoStabilization,
      autoExposure,
      enableFaceDetection,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is AdvancedCameraSettings) {
      return false
    }
    if (this === other) {
      return true
    }
    return BeautyCameraPluginPigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CameraSettings (
  val cameraLensFacing: CameraFacing? = null,
  val flashMode: FlashMode? = null,
  val zoom: Double? = null,
  val displayOrientation: Long? = null,
  val enableFaceDetection: Boolean? = null,
  val previewWidth: Long? = null,
  val previewHeight: Long? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): CameraSettings {
      val cameraLensFacing = pigeonVar_list[0] as CameraFacing?
      val flashMode = pigeonVar_list[1] as FlashMode?
      val zoom = pigeonVar_list[2] as Double?
      val displayOrientation = pigeonVar_list[3] as Long?
      val enableFaceDetection = pigeonVar_list[4] as Boolean?
      val previewWidth = pigeonVar_list[5] as Long?
      val previewHeight = pigeonVar_list[6] as Long?
      return CameraSettings(cameraLensFacing, flashMode, zoom, displayOrientation, enableFaceDetection, previewWidth, previewHeight)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      cameraLensFacing,
      flashMode,
      zoom,
      displayOrientation,
      enableFaceDetection,
      previewWidth,
      previewHeight,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is CameraSettings) {
      return false
    }
    if (this === other) {
      return true
    }
    return BeautyCameraPluginPigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FaceData (
  val x: Double,
  val y: Double,
  val size: Double,
  val id: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): FaceData {
      val x = pigeonVar_list[0] as Double
      val y = pigeonVar_list[1] as Double
      val size = pigeonVar_list[2] as Double
      val id = pigeonVar_list[3] as Long
      return FaceData(x, y, size, id)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      x,
      y,
      size,
      id,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is FaceData) {
      return false
    }
    if (this === other) {
      return true
    }
    return BeautyCameraPluginPigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PreviewSize (
  val width: Long,
  val height: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PreviewSize {
      val width = pigeonVar_list[0] as Long
      val height = pigeonVar_list[1] as Long
      return PreviewSize(width, height)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      width,
      height,
    )
  }
  override fun equals(other: Any?): Boolean {
    if (other !is PreviewSize) {
      return false
    }
    if (this === other) {
      return true
    }
    return BeautyCameraPluginPigeonPigeonUtils.deepEquals(toList(), other.toList())  }

  override fun hashCode(): Int = toList().hashCode()
}
private open class BeautyCameraPluginPigeonPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          CameraFilterMode.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          VideoQuality.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          FlashMode.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          CameraFacing.ofRaw(it.toInt())
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          ScaleType.ofRaw(it.toInt())
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          AdvancedCameraSettings.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CameraSettings.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FaceData.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PreviewSize.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is CameraFilterMode -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is VideoQuality -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is FlashMode -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is CameraFacing -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      is ScaleType -> {
        stream.write(133)
        writeValue(stream, value.raw)
      }
      is AdvancedCameraSettings -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is CameraSettings -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is FaceData -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is PreviewSize -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface BeautyCameraHostApi {
  fun initialize(settings: AdvancedCameraSettings, callback: (Result<Unit>) -> Unit)
  fun dispose(callback: (Result<Unit>) -> Unit)
  fun switchCamera(callback: (Result<Unit>) -> Unit)
  fun setZoom(zoomLevel: Double, callback: (Result<Unit>) -> Unit)
  fun focusOnPoint(x: Long, y: Long, callback: (Result<Unit>) -> Unit)
  fun setFlashMode(mode: FlashMode, callback: (Result<Unit>) -> Unit)
  fun setDisplayOrientation(degrees: Long, callback: (Result<Unit>) -> Unit)
  fun getPreviewTexture(callback: (Result<Long>) -> Unit)
  fun getPreviewSize(callback: (Result<PreviewSize>) -> Unit)
  fun takePhoto(callback: (Result<String>) -> Unit)
  fun startVideoRecording(callback: (Result<Unit>) -> Unit)
  fun stopVideoRecording(callback: (Result<String>) -> Unit)
  fun getCameraSensorAspectRatio(callback: (Result<Double>) -> Unit)
  fun setFilterMode(mode: CameraFilterMode, level: Double, callback: (Result<Unit>) -> Unit)
  fun setScaleType(scaleType: ScaleType, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by BeautyCameraHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      BeautyCameraPluginPigeonPigeonCodec()
    }
    /** Sets up an instance of `BeautyCameraHostApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: BeautyCameraHostApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.initialize$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val settingsArg = args[0] as AdvancedCameraSettings
            api.initialize(settingsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.dispose$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.dispose{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.switchCamera$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.switchCamera{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.setZoom$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val zoomLevelArg = args[0] as Double
            api.setZoom(zoomLevelArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.focusOnPoint$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val xArg = args[0] as Long
            val yArg = args[1] as Long
            api.focusOnPoint(xArg, yArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.setFlashMode$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val modeArg = args[0] as FlashMode
            api.setFlashMode(modeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.setDisplayOrientation$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val degreesArg = args[0] as Long
            api.setDisplayOrientation(degreesArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.getPreviewTexture$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getPreviewTexture{ result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.getPreviewSize$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getPreviewSize{ result: Result<PreviewSize> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.takePhoto$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.takePhoto{ result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.startVideoRecording$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.startVideoRecording{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.stopVideoRecording$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.stopVideoRecording{ result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.getCameraSensorAspectRatio$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getCameraSensorAspectRatio{ result: Result<Double> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.setFilterMode$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val modeArg = args[0] as CameraFilterMode
            val levelArg = args[1] as Double
            api.setFilterMode(modeArg, levelArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraHostApi.setScaleType$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val scaleTypeArg = args[0] as ScaleType
            api.setScaleType(scaleTypeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface CameraApi {
  fun initialize(settings: CameraSettings, callback: (Result<Unit>) -> Unit)
  fun startPreview(textureId: Long, callback: (Result<Unit>) -> Unit)
  fun stopPreview(callback: (Result<Unit>) -> Unit)
  fun switchCamera(callback: (Result<Unit>) -> Unit)
  fun setFlashMode(mode: FlashMode, callback: (Result<Unit>) -> Unit)
  fun setZoom(zoom: Double, callback: (Result<Unit>) -> Unit)
  fun setScaleType(scaleType: ScaleType, callback: (Result<Unit>) -> Unit)
  fun takePhoto(callback: (Result<String>) -> Unit)
  fun startVideoRecording(filePath: String, callback: (Result<Unit>) -> Unit)
  fun stopVideoRecording(callback: (Result<String>) -> Unit)
  fun dispose(callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by CameraApi. */
    val codec: MessageCodec<Any?> by lazy {
      BeautyCameraPluginPigeonPigeonCodec()
    }
    /** Sets up an instance of `CameraApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: CameraApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.CameraApi.initialize$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val settingsArg = args[0] as CameraSettings
            api.initialize(settingsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.CameraApi.startPreview$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val textureIdArg = args[0] as Long
            api.startPreview(textureIdArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.CameraApi.stopPreview$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.stopPreview{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.CameraApi.switchCamera$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.switchCamera{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.CameraApi.setFlashMode$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val modeArg = args[0] as FlashMode
            api.setFlashMode(modeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.CameraApi.setZoom$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val zoomArg = args[0] as Double
            api.setZoom(zoomArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.CameraApi.setScaleType$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val scaleTypeArg = args[0] as ScaleType
            api.setScaleType(scaleTypeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.CameraApi.takePhoto$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.takePhoto{ result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.CameraApi.startVideoRecording$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val filePathArg = args[0] as String
            api.startVideoRecording(filePathArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.CameraApi.stopVideoRecording$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.stopVideoRecording{ result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.com.beauty.camera_plugin.CameraApi.dispose$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.dispose{ result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapError(error))
              } else {
                reply.reply(BeautyCameraPluginPigeonPigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
class BeautyCameraFlutterApi(private val binaryMessenger: BinaryMessenger, private val messageChannelSuffix: String = "") {
  companion object {
    /** The codec used by BeautyCameraFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      BeautyCameraPluginPigeonPigeonCodec()
    }
  }
  fun onZoomChanged(zoomLevelArg: Double, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraFlutterApi.onZoomChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(zoomLevelArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(BeautyCameraPluginPigeonPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onFlashModeChanged(modeArg: FlashMode, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraFlutterApi.onFlashModeChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(modeArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(BeautyCameraPluginPigeonPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onCameraSwitched(cameraIdArg: String, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraFlutterApi.onCameraSwitched$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(cameraIdArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(BeautyCameraPluginPigeonPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onFaceDetected(facesArg: List<FaceData>, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraFlutterApi.onFaceDetected$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(facesArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(BeautyCameraPluginPigeonPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onVideoRecordingStarted(callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraFlutterApi.onVideoRecordingStarted$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(null) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(BeautyCameraPluginPigeonPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onVideoRecordingStopped(pathArg: String, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraFlutterApi.onVideoRecordingStopped$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pathArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(BeautyCameraPluginPigeonPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
  fun onFilterModeChanged(modeArg: CameraFilterMode, callback: (Result<Unit>) -> Unit)
{
    val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
    val channelName = "dev.flutter.pigeon.com.beauty.camera_plugin.BeautyCameraFlutterApi.onFilterModeChanged$separatedMessageChannelSuffix"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(modeArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(BeautyCameraPluginPigeonPigeonUtils.createConnectionError(channelName)))
      } 
    }
  }
}
